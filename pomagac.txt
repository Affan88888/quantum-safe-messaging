-PROVJERITI HomePage.css. Neke stvari ne rade to jest dzaba su callane u fajlu
-NAPRAVITI HAPROXY DA RADI SKROZ
-FIXATI HAPROXY NA LAPTOPU
-PROMIJENITI PASSWORD HASHING FUNKCIONALNOST The most secure option for password hashing in a post-quantum-focused application is Argon2 , combined with a hybrid approach that integrates post-quantum cryptographic primitives like Kyber.
-MAYBE IMPLEMENT ZERO TRUST ARCHITECTURE?
-qiskit, look up

\\wsl$

TO START PYTHON FLASK
cd /mnt/c/Users/ADS\ Studio/Desktop/quantum-safe-messaging/backend
cd /mnt/c/Users/affan/Desktop/quantum-safe-messaging/backend
source venv/bin/activate
python app.py

TO START HAPROXY
cd quantumsafe/haproxy/  ./haproxy -f haproxy_ssl_termination.cfg &

TO TEST INTEGRATION OF PYTHON FLASK AND HAPROXY
$BUILD_DIR/bin/curl https://localhost:8043 -v -k --curves kyber512:p521_kyber1024


ps aux | grep haproxy


bcdedit /set hypervisorlaunchtype off

bcdedit /set hypervisorlaunchtype auto

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

curl -X POST http://localhost:5000/api/auth/signup \
     -H "Content-Type: application/json" \
     -d '{"username": "testuser", "email": "test@example.com", "password": "password123"}'

curl -X POST http://localhost:5000/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{"email": "test@example.com", "password": "password123"}'

flask-unsign --decode --cookie '<session_cookie_value>' --secret '<your_app_secret_key>'

-talk about the problem, advantages and disadvantages
-what we implemented
-what we did so far
-key features
-state of art post quantum encryption system
-say who is in charge of what(photos)
-diagram of the steps we have done
-simplify the topic for audience
-summary of the project
-mention how you overcame the challenges

CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(255) NOT NULL UNIQUE,
                email VARCHAR(255) NOT NULL UNIQUE,
                password_hash VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ); CREATE TABLE IF NOT EXISTS chats (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255), -- Optional: For naming group chats
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ); CREATE TABLE IF NOT EXISTS chat_participants (
                chat_id INT NOT NULL,
                user_id INT NOT NULL,
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (chat_id, user_id),
                FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            ); CREATE TABLE IF NOT EXISTS messages (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id INT NOT NULL,
                sender_id INT NOT NULL,
                content TEXT NOT NULL, -- The text content of the message
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE,
                FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE
            ); CREATE TABLE IF NOT EXISTS user_contacts (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                contact_id INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (contact_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE (user_id, contact_id) -- Ensures no duplicate contacts for the same user
            );
